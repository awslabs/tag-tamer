AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloudformation template for TagTamer solution components - version - RC16

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label:
          default: "Amazon EC2 Configuration"
        Parameters: 
          - KeyName
          - AMIID
      - Label:
          default: "ALB Configuration"
        Parameters: 
          - Certificate
          - CIDRIPRange
      - Label:
          default: "Cognito User Pool configuration for Authentication"
        Parameters: 
          - Email
          - TagTamerUserPoolName
      - Label:
          default: "Cognito Identity Pool configuration"
        Parameters: 
          - TagTamerIdentityPoolName
      - Label:
          default: "List of multiple AWS account numbers to manage"
        Parameters:
           - TagTamerMultiAccounts

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: yourkeyname
  AMIID:
    Description: Select Amazon Linux AMI to use for Tag Tamer solution. Recommend to use amzn2-ami-hvm-x86_64-gp2.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  CIDRIPRange:
    Description : >-
      The CIDR IP address range that can be used to access ALB.
      Example: To restrict to particular subnet input 10.10.1.0/24, To allow all subnets input 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  Certificate:
    Description: >-
      Name of the certificate to use for ALB SSL connections.
      Example: arn:aws:acm-pca:region:account:certificate-authority/resource-identifier
    Type: String
  Email:
    Type: String
    Description: Source email address for sending emails to new users.  Must be an SES validated address.
  TagTamerUserPoolName:
    Type: String
    Default: tag_tamer_user_pool
    Description: Name of Tag Tamer's Amazon Cognito User Pool used for user authentication
  TagTamerIdentityPoolName:
    Type: String
    Default: tag_tamer_identity_pool
    Description: Name of Tag Tamer's Amazon Cognito Identity Pool
  TagTamerMultiAccounts:
    Type: String
    Description: Comma separated list of AWS account numbers Tag Tamer should manage.  Do not include the AWS account number where the Tag Tamer EC2 instance is deployed.
  
Mappings:
  SourceCode:
    General:
      S3Bucket: '%%BUCKET_NAME%%'
      KeyPrefix: '%%SOLUTION_NAME%%/%%VERSION%%'
      Version: '%%VERSION%%'

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.10.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Tagtamer-VPC
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W60
            reason: "Customers may enable VPC flow logs for this VPC if they choose."

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: Tagtamer-IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: Tagtamer-NATGW
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: Tagtamer-EIP


  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.0/26
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
      - Key: Name
        Value: Tagtamer-Public-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.64/26
      AvailabilityZone: !Sub ${AWS::Region}b
      Tags:
      - Key: Name
        Value: Tagtamer-Public-B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.128/26
      AvailabilityZone: !Sub ${AWS::Region}a
      Tags:
      - Key: Name
        Value: Tagtamer-Private-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.10.192/26
      AvailabilityZone: !Sub ${AWS::Region}b
      Tags:
      - Key: Name
        Value: Tagtamer-Private-B

  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Tagtamer-Public-route

  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  

  # Here is a private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Tagtamer-Private-route

  PrivateRoute1:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

# Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable


  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Internet facing LoadBalancer security group
      SecurityGroupIngress:
      - CidrIp: !Ref CIDRIPRange
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: !Ref CIDRIPRange
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
          FromPort: 0
          ToPort: 65535
      Tags:
      - Key: Name
        Value: Tagtamer-PublicLoadBalancerSecurityGroup
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W5
            reason: "Works as designed"
          - id: W36
            reason: "This Security Group includes a description."
          - id: W29
            reason: "Works as designed"

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: TagtamerALB
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups: 
      - Ref: PublicLoadBalancerSecurityGroup
      Tags:
      - Key: Name
        Value: Tagtamer-PublicLoadBalancer
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W28
            reason: "Works as designed"
          - id: W52
            reason: "Tag Tamer customers may enable access logs if they choose."

  HTTP443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TagtamerTargetGroup
      LoadBalancerArn:
        Ref: PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W55
            reason: "Tag Tamer customers may specify the TLS 1.2 ciphers they want to support at or after deployment."

  TagtamerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TagtamerTargetGroup
      Conditions:
      - Field: path-pattern
        Values:
        - "*"
      ListenerArn:
        Ref: HTTP443Listener
      Priority: 1


  TagtamerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TagtamerTargetGroup
      Port: 443
      Protocol: HTTPS
      HealthCheckPath: /elb-status
      VpcId:
        Ref: VPC
      Targets:
      - Id: !Ref EC2Instance
        Port: 443
      Tags:
      - Key: Name
        Value: Tagtamer-TargetGroup

  TagTamerTagGroupsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: tag_group_name
          AttributeType: S
      BillingMode: 'PROVISIONED'
      KeySchema:
        - AttributeName: tag_group_name
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: tag_tamer_tag_groups
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W74
            reason: "Encrypted using AWS-owned CMK.  Customers may change this to their CMK if desired."
          - id: W28
            reason: "Works as designed"
  TagTamerRolesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: role_arn
          AttributeType: S
      BillingMode: 'PROVISIONED'
      KeySchema:
        - AttributeName: role_arn
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: tag_tamer_roles
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W74
            reason: "Encrypted using AWS-owned CMK.  Customers may change this to their CMK if desired."
          - id: W28
            reason: "Works as designed"
  TagTamerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: TagTamerRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W28
            reason: "Works as designed"
  TagTamerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow inbound https traffic
      GroupName: SG-TagTamer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        #- IpProtocol: tcp
        #  FromPort: 80
        #  ToPort: 80
        #  CidrIp: 0.0.0.0/0
        #- IpProtocol: tcp
        #  FromPort: 22
        #  ToPort: 22
        #  CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
          FromPort: 0
          ToPort: 65535
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W2
            reason: "Tag Tamer customer may limit ingress CIDR to specific IP ranges for their users."
          - id: W28
            reason: "Works as designed"
          - id: W29
            reason: "Works as designed"
          - id: W5
            reason: "Works as designed"
          - id: W9
            reason: "Works as designed"
          - id: W36
            reason: "This Security Group includes a description."
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
            Encrypted: true
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      ImageId: !Ref AMIID
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnetA
      IamInstanceProfile: !Ref TagTamerInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            cd /var/tmp
            yum -y install git dos2unix
            git clone https://github.com/billdry/tag-tamer.git
            cd tag-tamer/source
            dos2unix tagtamer-install.sh
            bash tagtamer-install.sh
      Tags:
        - Key: Name
          Value: Tag Tamer Web App
        - Key: Usage
          Value: Tag Tamer Solution UI
#  EC2InstanceEIP:
#    Type: 'AWS::EC2::EIP'
#    Properties:
#      Domain: vpc
#      InstanceId: !Ref EC2Instance
#    DependsOn:
#      - EC2Instance
  TagTamerWebAppEC2InstancePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamerWebAppEC2InstancePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CognitoIdentity
            Action:
              - 'cognito-identity:GetId'
              - 'cognito-identity:GetCredentialsForIdentity'
            Effect: Allow
            Resource: !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${TagTamerCognitoIdentityPool}'
          - Sid: SSMParameters
            Action:
              - 'ssm:GetParametersByPath'
            Effect: Allow
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tag-tamer/*'
          - Sid: CognitoUserPool
            Action:
              - 'cognito-idp:AdminListGroupsForUser'
            Effect: Allow
            Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TagTamerCognitoUserPool}'
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole

  TagTamerWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: TagTamerWebACL
      Scope: REGIONAL
      Description: Tag Tamer WAF
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: TagTamerWebACL
      Rules:
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 0
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesCommonRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
    DependsOn:
      - PublicLoadBalancer

  TagTamerWebACLAssociation:
    Type: "AWS::WAFv2::WebACLAssociation"
    Properties:
      ResourceArn: !Ref PublicLoadBalancer
      WebACLArn: { "Fn::GetAtt" : ["TagTamerWebACL", "Arn"] }
    DependsOn:
      - TagTamerWebACL

  TagTamerCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          SMSMessage: 'Your Tag Tamer username is {username} and temporary password is {####}. '
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary Tag Tamer password
      AliasAttributes:
      - email
      - preferred_username
      AutoVerifiedAttributes:
      - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: true
      EmailConfiguration:
        SourceArn: !Sub 
          - 'arn:aws:ses:${MyRegion}:${MyAccountID}:identity/${EmailAddress}'
          - MyRegion: !Ref 'AWS::Region'
            MyAccountID: !Ref 'AWS::AccountId'
            EmailAddress: !Ref Email
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: 'Your Tag Tamer verification code is {####}. '
      EmailVerificationSubject: Your Tag Tamer verification code
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
      - AttributeDataType: String
        Mutable: false
        Name: email
        Required: true
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName:
        Ref: TagTamerUserPoolName
      VerificationMessageTemplate:
        SmsMessage: 'Your verification code is {####}. '
        EmailMessage: 'Your Tag Tamer verification code is {####}. '
        EmailSubject: Your Tag Tamer verification code
        DefaultEmailOption: CONFIRM_WITH_CODE
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: F78
            reason: "Works as designed.  If Tag Tamer admins choose to require MFA for access, they can enable it."

  TagTamerUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: EC2Instance
      UserPoolId:
        Ref: TagTamerCognitoUserPool
  TagTamerUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
      - code
      - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - aws.cognito.signin.user.admin
      - email
      - openid
      - phone
      - profile
      CallbackURLs: 
       - !Sub https://${PublicLoadBalancer.DNSName}/aws_cognito_redirect
      ClientName: tag-tamer-pool-client
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      GenerateSecret: true
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
      - address
      - birthdate
      - email
      - email_verified
      - family_name
      - gender
      - given_name
      - locale
      - middle_name
      - name
      - nickname
      - phone_number
      - phone_number_verified
      - picture
      - preferred_username
      - profile
      - updated_at
      - website
      - zoneinfo
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: TagTamerCognitoUserPool
      WriteAttributes:
      - address
      - birthdate
      - email
      - family_name
      - gender
      - given_name
      - locale
      - middle_name
      - name
      - nickname
      - phone_number
      - picture
      - preferred_username
      - profile
      - updated_at
      - website
      - zoneinfo

  TagTamerCognitoDefaultRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-default-region-value
      Type: String
      Value: !Ref "AWS::Region"

  TagTamerCognitoDomain:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-domain-value
      Type: String
      Value: !Sub https://${EC2Instance}.auth.${AWS::Region}.amazoncognito.com

  TagTamerCognitoUserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-user-pool-id-value
      Type: String
      Value: !Ref TagTamerCognitoUserPool

  TagTamerCognitoAppClientId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-app-client-id
      Type: String
      Value: !Ref TagTamerUserPoolClient

  TagTamerCognitoAppClientSecret:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-app-client-secret-value
      Type: String
      Value: !GetAtt UserPoolClientInputs.appSecret
    DependsOn: UserPoolClientInputs

  TagTamerCognitoRedirectURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-redirect-url-value
      Type: String
      Value: !Sub https://${PublicLoadBalancer.DNSName}/aws_cognito_redirect

  TagTamerJwtTokenLocation:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-token-location
      Type: String
      Value: cookies

  TagTamerJwtCookiesSecure:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-cookie-secure
      Type: String
      Value: 'True'

  TagTamerJwtAccessCookieName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-access-cookie-name
      Type: String
      Value: access_token

  TagTamerJwtCookieCsrfProtect:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-cookie-csrf-protect
      Type: String
      Value: 'True'
    
  TagTamerCognitoIdentityPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-identity-pool-id-value
      Type: String
      Value: !Ref TagTamerCognitoIdentityPool
  
  TagTamerMultiAccountsList:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/multi-accounts
      Type: String
      Value: !Ref TagTamerMultiAccounts

  UserPoolClientRole:
  # Created to execute Lambda which gets userpool app client config values
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: TagTamer-LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W28
            reason: "Works as designed"
    DependsOn: TagTamerUserPoolClient

  UserPoolClientLambda:
  # Lambda which gets userpool app client config values
  # Depends on UserPool for id
  # Depends on UserPoolClientRole for role ARN
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+
          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const identity = new aws.CognitoIdentityServiceProvider();'
            - 'exports.handler = (event, context, callback) => {'
            - ' if (event.RequestType == ''Delete'') { '
            - '   response.send(event, context, response.SUCCESS, {})'
            - ' }'
            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
            - '   const params = {'
            - '     ClientId: event.ResourceProperties.clientId,'
            - '     UserPoolId: event.ResourceProperties.userpoolId'
            - '   };'
            - '   identity.describeUserPoolClient(params).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'  
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILED, {err});'
            - '     });'
            - ' }'
            - '};'
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: 300
      Role: !GetAtt 
        - UserPoolClientRole
        - Arn
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W58
            reason: "Works as designed"
    DependsOn: UserPoolClientRole

  UserPoolClientLambdaPolicy:
  # Sets userpool policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamer-Lambda-Policy
      Roles: 
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:DescribeUserPoolClient'
            Resource: !GetAtt TagTamerCognitoUserPool.Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientLogPolicy:
  # Sets log policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamer-LambdaLog-Policy
      Roles: 
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub  
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref UserPoolClientLambda}
    DependsOn: UserPoolClientLambdaPolicy  
  UserPoolClientInputs:
  # Values passed to Userpool client Lambda
  # Depends on UserPool for Id
  # Depends on UserPoolClient for Id
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt UserPoolClientLambda.Arn
      clientId: !Ref TagTamerUserPoolClient
      userpoolId: !Ref TagTamerCognitoUserPool
    DependsOn: UserPoolClientLogPolicy
  
  TagTamerCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref TagTamerUserPoolClient
          ProviderName: !GetAtt TagTamerCognitoUserPool.ProviderName
      IdentityPoolName: !Ref TagTamerIdentityPoolName
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W57
            reason: "Works as designed.  All authentication based on asserted identity JWT."
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
#  AZ:
#    Description: Availability Zone of the newly created EC2 instance
#    Value: !GetAtt 
#      - EC2Instance
#      - AvailabilityZone
  EC2InstancePrivateIP:
    Description: PrivateIP assigned to EC2Instance
    Value: !GetAtt 
      - EC2Instance
      - PrivateIp
  PublicLoadBalancerDNSName:
    Description: Public DNS Name assigned for ALB
    Value: !GetAtt 
      - PublicLoadBalancer
      - DNSName
  TagTamerURL:
    Description: Login URL for Tag Tamer Application
    Value: !Sub https://${PublicLoadBalancer.DNSName}/sign-in

#  PublicIP:
#    Description: Public IP address of the newly created EC2 instance
#    Value: !GetAtt 
#      - EC2Instance
#      - PublicIp