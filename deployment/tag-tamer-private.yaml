AWSTemplateFormatVersion: 2010-09-09
Description: (SO0132) AWS Cloudformation template for Tag Tamer solution components - (Version %%VERSION%% )
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label:
          default: "Amazon Elastic Compute Cloud (EC2) Configuration"
        Parameters: 
        # If you would like to use SSH, please uncomment all template areas that use the SSK Key 
        #  - KeyName
          - CIDRIPRange
          - AMIID
      - Label:
          default: "Network Configuration for Amazon EC2"
        Parameters: 
          - VPCID
          - PrivateSubnet
      - Label:
          default: "Amazon Cognito configuration for Authentication"
        Parameters: 
          - Email
          - TagTamerUserPoolName
      - Label:
          default: "Amazon Cognito Identity Pool configuration"
        Parameters: 
          - TagTamerIdentityPoolName
      - Label:
          default: "List of multiple AWS account numbers to manage"
        Parameters:
           - TagTamerMultiAccounts

Parameters:
  #KeyName:
  #  Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  #  Type: 'AWS::EC2::KeyPair::KeyName'
  #  ConstraintDescription: must be the name of an existing EC2 KeyPair.
  #  Default: yourkeyname
  AMIID:
    Description: Select Amazon Linux AMI to use for Tag Tamer solution. Recommended to use amzn2-ami-hvm-x86_64-gp2.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VPCID:
    Description: Name of the Amazon Virtual Private Cloud (VPC)
    Type: 'AWS::EC2::VPC::Id'
  PrivateSubnet:
    Description: >-
      Name of an existing Private Subnet to deploy Amazon EC2. Example: subnet-0a0b04653f7a82e25
    Type: 'AWS::EC2::Subnet::Id'
  CIDRIPRange:
    Description : >-
      The CIDR IP address range that can be used to access Application. 
      Example: To restrict to particular subnet input 10.10.1.0/24, To allow all subnets input 0.0.0.0/0
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  Email:
    Type: String
    Description: Source email address for sending emails to new users.  Must be an Amazon Simple Email Service (SES) validated address.
  TagTamerUserPoolName:
    Type: String
    Default: tag-tamer-user-pool
    Description: Name of Tag Tamer's Amazon Cognito User Pool used for user authentication
  TagTamerIdentityPoolName:
    Type: String
    Default: tag_tamer_identity_pool
    Description: Name of Tag Tamer's Amazon Cognito Identity Pool
  TagTamerMultiAccounts:
    Type: String
    Description: Comma separated list of AWS account numbers Tag Tamer should manage.  Do not include the AWS account number where the Tag Tamer Amazon EC2 instance is deployed.
    Default: '1'
    
Mappings:
  SourceCode:
    General:
      S3Bucket: '%%BUCKET_NAME%%'
      KeyPrefix: '%%SOLUTION_NAME%%/%%VERSION%%'
      Version: '%%VERSION%%'

Resources:
  TagTamerTagGroupsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: tag_group_name
          AttributeType: S
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: tag_group_name
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: False
      TableName: tag_tamer_tag_groups
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W28
            reason: "Works as designed.  Tag Tamer will not replace this resource.  The name clearly denotes its use in the Tag Tamer solution."
          - id: W74
            reason: "Encrypted using AWS-owned CMK.  Customers may change this to their CMK if desired."
  TagTamerRolesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: role_arn
          AttributeType: S
      BillingMode: 'PROVISIONED'
      KeySchema:
        - AttributeName: role_arn
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False
      TableName: tag_tamer_roles
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W28
            reason: "Works as designed.  Tag Tamer will not replace this resource.  The name clearly denotes its use in the Tag Tamer solution."
          - id: W74
            reason: "Encrypted using AWS-owned CMK.  Customers may change this to their CMK if desired."
  TagTamerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: TagTamerRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W28
            reason: "Works as designed.  Tag Tamer will not replace this resource.  The name clearly denotes its use in the Tag Tamer solution."
  TagTamerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow inbound https traffic & outbound traffic initiated by Tag Tamer web app'
      GroupName: SG-TagTamer
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CIDRIPRange
      SecurityGroupEgress:
        - IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
          FromPort: 443
          ToPort: 443
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W28
            reason: "Works as designed.  Tag Tamer will not replace this resource.  The name clearly denotes its use in the Tag Tamer solution."
          - id: W29
            reason: "Works as designed"
          - id: W5
            reason: "Works as designed.  Customers may limit the destination IP addresses to specific repos & services based on their policies."
          - id: W36
            reason: "This Security Group includes a description."
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      ImageId: !Ref AMIID
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            # VolumeType: gp2
            VolumeType: gp3
            VolumeSize: 8
            DeleteOnTermination: true
            Encrypted: true
      #KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref TagTamerInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            cd /var/tmp
            yum -y install git dos2unix
            git clone https://github.com/billdry/tag-tamer.git
            cd /var/tmp/tag-tamer/source/code
            dos2unix tag_tamer_parameters.json
            sed -i -e 's/"base_region": "us-east-1",/"base_region": "${AWS::Region}",/' tag_tamer_parameters.json
            cd /var/tmp/tag-tamer/source
            dos2unix tagtamer-install.sh
            bash tagtamer-install.sh
      Tags:
        - Key: Name
          Value: Tag Tamer Web App
        - Key: Usage
          Value: Tag Tamer Solution UI
  TagTamerWebAppEC2InstancePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TagTamerWebAppEC2InstancePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CognitoIdentity
            Action:
              - 'cognito-identity:GetId'
              - 'cognito-identity:GetCredentialsForIdentity'
            Effect: Allow
            Resource: !Sub 'arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${TagTamerCognitoIdentityPool}'
          - Sid: SSMParameters
            Action:
              - 'ssm:GetParametersByPath'
            Effect: Allow
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tag-tamer/*'
          - Sid: CognitoUserPool
            Action:
              - 'cognito-idp:AdminListGroupsForUser'
            Effect: Allow
            Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${TagTamerCognitoUserPool}'
      Roles:
        - TagTamerRole
    DependsOn:
      - TagTamerRole

  TagTamerCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          SMSMessage: 'Your Tag Tamer username is {username} and temporary password is {####}. '
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary Tag Tamer password
      AliasAttributes:
      - email
      - preferred_username
      AutoVerifiedAttributes:
      - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: true
      EmailConfiguration:
        SourceArn: !Sub 
          - 'arn:aws:ses:${MyRegion}:${MyAccountID}:identity/${EmailAddress}'
          - MyRegion: !Ref 'AWS::Region'
            MyAccountID: !Ref 'AWS::AccountId'
            EmailAddress: !Ref Email
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: 'Your Tag Tamer verification code is {####}. '
      EmailVerificationSubject: Your Tag Tamer verification code
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
      - AttributeDataType: String
        Mutable: false
        Name: email
        Required: true
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName:
        Ref: TagTamerUserPoolName
      VerificationMessageTemplate:
        SmsMessage: 'Your verification code is {####}. '
        EmailMessage: 'Your Tag Tamer verification code is {####}. '
        EmailSubject: Your Tag Tamer verification code
        DefaultEmailOption: CONFIRM_WITH_CODE
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: F78
            reason: "Works as designed.  If Tag Tamer admins choose to require MFA for access, they can enable it."

  TagTamerUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: EC2Instance
      UserPoolId:
        Ref: TagTamerCognitoUserPool
  TagTamerUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
      - code
      - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - aws.cognito.signin.user.admin
      - email
      - openid
      - phone
      - profile
      CallbackURLs: 
       - !Sub https://${EC2Instance.PrivateDnsName}/aws_cognito_redirect
      ClientName: tag-tamer-pool-client
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      GenerateSecret: true
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
      - address
      - birthdate
      - email
      - email_verified
      - family_name
      - gender
      - given_name
      - locale
      - middle_name
      - name
      - nickname
      - phone_number
      - phone_number_verified
      - picture
      - preferred_username
      - profile
      - updated_at
      - website
      - zoneinfo
      SupportedIdentityProviders:
      - COGNITO
      UserPoolId:
        Ref: TagTamerCognitoUserPool
      WriteAttributes:
      - address
      - birthdate
      - email
      - family_name
      - gender
      - given_name
      - locale
      - middle_name
      - name
      - nickname
      - phone_number
      - picture
      - preferred_username
      - profile
      - updated_at
      - website
      - zoneinfo
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: F78
            reason: "Works as designed.  If Tag Tamer admins choose to require MFA for access, they can enable it."

  TagTamerCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref TagTamerUserPoolClient
          ProviderName: !GetAtt TagTamerCognitoUserPool.ProviderName
      IdentityPoolName: !Ref TagTamerIdentityPoolName
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W57
            reason: "Works as designed.  All authentication based on asserted identity JWT."
  TagTamerCognitoDefaultRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-default-region-value
      Type: String
      Value: !Ref "AWS::Region"

  TagTamerCognitoDomain:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-domain-value
      Type: String
      Value: !Sub https://${EC2Instance}.auth.${AWS::Region}.amazoncognito.com

  TagTamerCognitoIdentityPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-identity-pool-id-value
      Type: String
      Value: !Ref TagTamerCognitoIdentityPool
  
  TagTamerCognitoUserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-user-pool-id-value
      Type: String
      Value: !Ref TagTamerCognitoUserPool

  TagTamerCognitoAppClientId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-app-client-id
      Type: String
      Value: !Ref TagTamerUserPoolClient

  TagTamerCognitoRedirectURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/cognito-redirect-url-value
      Type: String
      Value: !Sub https://${EC2Instance.PrivateDnsName}/aws_cognito_redirect

  TagTamerJwtTokenLocation:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-token-location
      Type: String
      Value: cookies

  TagTamerJwtCookiesSecure:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-cookie-secure
      Type: String
      Value: 'True'

  TagTamerJwtAccessCookieName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-access-cookie-name
      Type: String
      Value: access_token

  TagTamerJwtCookieCsrfProtect:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/jwt-cookie-csrf-protect
      Type: String
      Value: 'True'

  TagTamerMultiAccountsList:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /tag-tamer/multi-accounts
      Type: String
      Value: !Ref TagTamerMultiAccounts

  # Created to start Lambda which gets userpool app client config values
  TagTamerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: TagTamerLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - kms:Encrypt
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolClient
                Resource: "*"
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W11
            reason: "Works as designed.  Tag Tamer creates multiple Amazon CloudWatch Logs for Lambda & SSM parameters dynamically."  

  UserPoolClientInputs:
  # Values passed to Userpool client Lambda
  # Depends on UserPool for Id
  # Depends on UserPoolClient for Id
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt UserPoolClientLambda.Arn
      clientId: !Ref TagTamerUserPoolClient
      userpoolId: !Ref TagTamerCognitoUserPool
    DependsOn: UserPoolClientLambda

  UserPoolClientLambda:
  # Lambda which gets userpool app client config values
  # Depends on UserPool for id
  # Depends on UserPoolClientRole for role ARN
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+
          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const identity = new aws.CognitoIdentityServiceProvider();'
            - 'exports.handler = (event, context, callback) => {'
            - ' if (event.RequestType == ''Delete'') { '
            - '   response.send(event, context, response.SUCCESS, {})'
            - ' }'
            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
            - '   const params = {'
            - '     ClientId: event.ResourceProperties.clientId,'
            - '     UserPoolId: event.ResourceProperties.userpoolId'
            - '   };'
            - '   identity.describeUserPoolClient(params).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'  
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILED, {err});'
            - '     });'
            - ' }'
            - '};'
      Handler: index.handler
      Role: !GetAtt TagTamerLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W58
            reason: "Works as designed.  The attached role includes permissions to write to Amazon CloudWatch logs."
          - id: W89
            reason: "Works as designed.  This Lambda function retrieves the new Cognito ClientID & UserPoolId parameters.  There is no VPC established & Amazon Cognito does not support private link."
          - id: W92
            reason: "This Lambda function executes only once during Tag Tamer installation."
    DependsOn: TagTamerLambdaRole

# Custom resource for storing secrets in SSM as SecureString
  TagTamerCognitoAppClientSecretInputs:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt TagTamerCognitoAppClientSecretLambda.Arn
      AppClientSecret: !GetAtt UserPoolClientInputs.appSecret
      Type: SecureString
      ParameterName: /tag-tamer/cognito-app-client-secret-value
    DependsOn: TagTamerCognitoAppClientSecretLambda

  TagTamerCognitoAppClientSecretLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var response = require('cfn-response');
          var aws = require('aws-sdk');
          exports.handler = function(event, context) {
              console.log(event);

              var ssm = new aws.SSM();
              var props = event.ResourceProperties;

              var splitStackArn = event.StackId.split(':');
              var region = splitStackArn[3];
              var accountId = splitStackArn[4];

              var stackName = splitStackArn[5].split("/")[1];
              var paramName = props.ParameterName
              var paramArn = "arn:aws:ssm:" + region + ":" + accountId + ":parameter/" + paramName;
              var cb = function(err, resp) {
                  var cfnRespData = { Arn: paramArn, Name: paramName };
                  if (err) {
                      console.log(err);
                      response.send(event, context, response.FAILED, cfnRespData, paramArn);
                  } else {
                      console.log(resp);
                      response.send(event, context, response.SUCCESS, cfnRespData, paramArn);
                  }
              };
              if (event.RequestType == "Create") {
                  var params = {
                      Name: paramName,
                      Type: props.Type,
                      Value: props.AppClientSecret,
                      KeyId: props.KeyId,
                      Overwrite: false
                  };
                  if (props.Description) params.Description = props.Description;
                  if (props.KeyId) params.KeyId = props.KeyId;

                  ssm.putParameter(params, cb);
              } else if (event.RequestType == "Update") {
                  var params = {
                      Name: paramName,
                      Type: props.Type,
                      Value: props.AppClientSecret,
                      KeyId: props.KeyId,
                      Overwrite: true
                  };
                  if (props.Description) params.Description = props.Description;
                  if (props.KeyId) params.KeyId = props.KeyId;
                  ssm.putParameter(params, cb);
              } else if (event.RequestType == "Delete") {
                  ssm.deleteParameter({ Name: paramName }, cb);
              }
          };

      Handler: index.handler
      Role: !GetAtt TagTamerLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
    Metadata:
        cfn_nag:
          rules_to_suppress:
          - id: W58
            reason: "Works as designed.  The attached role includes permissions to write to Amazon CloudWatch logs."
          - id: W89
            reason: "Works as designed.  This Lambda function stores the new Amazon Cognito AppClientSecret.  There is no VPC established & Amazon Cognito does not support private link."
          - id: W92
            reason: "This Lambda function executes only once to store an AWS SSM parameter for Amazon Cognito AppClientSecret."
    DependsOn: TagTamerLambdaRole



Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  
  EC2InstancePrivateIP:
    Description: PrivateIP assigned to EC2Instance
    Value: !GetAtt 
      - EC2Instance
      - PrivateIp

  TagTamerURL:
    Description: Login URL for Tag Tamer Application
    Value: !Sub https://${EC2Instance.PrivateDnsName}/sign-in